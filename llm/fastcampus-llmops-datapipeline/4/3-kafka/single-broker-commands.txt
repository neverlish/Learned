$ docker-compose up -d 

#####################
### topic cli 실습 ###
#####################

// topic 생성
$ docker-compose exec kafka kafka-topics --create --topic first-topic --bootstrap-server kafka:9092 
$ docker-compose exec kafka kafka-topics --create --topic second-topic --bootstrap-server kafka:9092 --partitions 3 
$ docker-compose exec kafka kafka-topics --create --topic third-topic --bootstrap-server kafka:9092 --partitions 3 --replication-factor 2

$ docker-compose exec kafka kafka-topics --create --topic third-topic --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1

// topic 리스트 확인
$ docker-compose exec kafka kafka-topics --list --bootstrap-server kafka:9092

// 각 topic의 상세 설명
$ docker-compose exec kafka kafka-topics --describe --topic first-topic --bootstrap-server kafka:9092

// topic 삭제
$ docker-compose exec kafka kafka-topics --delete --topic first-topic --bootstrap-server kafka:9092


########################
### producer cli 실습 ###
########################


// topic 재생성
$ docker-compose exec kafka kafka-topics --create --topic first-topic --bootstrap-server kafka:9092 
$ docker-compose exec kafka bash

// producer 생성
$ kafka-console-producer --topic first-topic --broker-list kafka:9092

$ kafka-console-producer --topic first-topic --broker-list kafka:9092 --producer-property acks=all

// 없는 topic에 producer 생성? -> 동적으로 topic을 생성하게 됨. 실무에선 지양
$ kafka-console-producer --topic new-topic --broker-list kafka:9092

// producer with keys
$ kafka-console-producer --topic first-topic --broker-list kafka:9092 --property parse.key=true --property key.separator=:

########################
### consumer cli 실습 ###
########################

$ docker-compose exec kafka bash
$ kafka-console-consumer --topic first-topic --bootstrap-server localhost:9092

// 토픽 생성
$ docker-compose exec kafka kafka-topics --bootstrap-server localhost:9092 --topic second-topic --create --partitions 3

$ docker-compose exec kafka bash
// consumer
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic second-topic --from-beginning

// 다른 터미널 열기
$ docker-compose exec kafka bash
// producer 생성
// RoundRobinPartitioner : 실무에선 사용 X, 동작 방식 확인용
$ kafka-console-producer --bootstrap-server localhost:9092 --producer-property partitioner.class=org.apache.kafka.clients.producer.RoundRobinPartitioner --topic second-topic
// producer에 string을 추가하면, consumer에서 잘 보이는 것을 확인.

// consumer 종료 후 다시 띄우기


// from beginning.
// producer에서 전송한 순서대로 데이터가 보이지는 않음.
// -> (토픽 내의 여러 개의 파티션이 존재하고, 각 파티션 별로 데이터를 보여주기 때문.)
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic second-topic --from-beginning


// key, value, timestamp 출력
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic second-topic --formatter kafka.tools.DefaultMessageFormatter --property print.timestamp=true --property print.key=true --property print.value=true --property print.partition=true --from-beginning


#############################
### Consumer groups 실습 1 ###
#############################


// topic 생성 (partition 3개)

$ docker-compose exec kafka kafka-topics --create --topic third-topic --bootstrap-server kafka:9092 --partitions 3 --replication-factor 1

$ docker-compose exec kafka bash

// consumer 1
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic third-topic --group my-first-application

// producer
$ kafka-console-producer --bootstrap-server localhost:9092 --producer-property partitioner.class=org.apache.kafka.clients.producer.RoundRobinPartitioner --topic third-topic

// consumer 2
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic third-topic --group my-first-application

// consumer 3
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic third-topic --group my-first-application

// consumer 4
// partition 개수보다 consumer 개수가 더 많으면, 1개 이상의 conusmer는 데이터를 아예 못 받을 수도 있음.
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic third-topic --group my-first-application

// 같은 명령어를 한 번 더 입력하면, 아무 것도 보이지 않음.
// --from-beginning : consumer_offset 이 없을 때만 유효하게 동작함.
$ kafka-console-consumer --bootstrap-server localhost:9092 --topic third-topic --group my-second-application --from-beginning
